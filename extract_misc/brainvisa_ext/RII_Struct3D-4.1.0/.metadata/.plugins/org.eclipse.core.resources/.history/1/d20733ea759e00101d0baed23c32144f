<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>RicUtil: src/RicUtil.h File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>src/RicUtil.h File Reference</h1><code>#include &quot;RicPoint.h&quot;</code><br>
<code>#include &quot;RicMatrix.h&quot;</code><br>
<code>#include &lt;stdio.h&gt;</code><br>

<p>
<div class="dynheader">
Include dependency graph for RicUtil.h:</div>
<div class="dynsection">
<p><center><img src="RicUtil_8h__incl.png" border="0" usemap="#src/RicUtil.h_map" alt=""></center>
<map name="src/RicUtil.h_map">
<area shape="rect" href="RicPoint_8h&#45;source.html" title="RicPoint.h" alt="" coords="5,161,96,188"><area shape="rect" href="RicMatrix_8h&#45;source.html" title="RicMatrix.h" alt="" coords="84,84,183,111"></map>
</div>

<p>
<div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dynsection">
<p><center><img src="RicUtil_8h__dep__incl.png" border="0" usemap="#src/RicUtil.hdep_map" alt=""></center>
<map name="src/RicUtil.hdep_map">
<area shape="rect" href="RicUtil_8cpp.html" title="src/RicUtil.cpp" alt="" coords="5,84,125,111"></map>
</div>

<p>
<a href="RicUtil_8h-source.html">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structCylind.html">Cylind</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">3d cylindrical point - float  <a href="structCylind.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structICyl.html">ICyl</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">3d cylindrical point - integer  <a href="structICyl.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDCylind.html">DCylind</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">3d cylindrical point - double  <a href="structDCylind.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structSphere.html">Sphere</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">3d point in spherical coordinates  <a href="structSphere.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>DSphere</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structComplex.html">Complex</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">complex number  <a href="structComplex.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structvertx.html">vertx</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vertex on surface  <a href="structvertx.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structTriangle.html">Triangle</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">triangle structure  <a href="structTriangle.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structColor.html">Color</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">color structure  <a href="structColor.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRotate.html">Rotate</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">class for rotating points about an axis  <a href="classRotate.html#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4ea3408eef4068c2ba6f6a5289a01b86"></a><!-- doxytag: member="RicUtil.h::_RICUTIL_H" ref="4ea3408eef4068c2ba6f6a5289a01b86" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>_RICUTIL_H</b>&nbsp;&nbsp;&nbsp;1</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8b6d77865140befe3a9bc16132d2e696"></a><!-- doxytag: member="RicUtil.h::MAX_STR" ref="8b6d77865140befe3a9bc16132d2e696" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>MAX_STR</b>&nbsp;&nbsp;&nbsp;256</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="598a3330b3c21701223ee0ca14316eca"></a><!-- doxytag: member="RicUtil.h::PI" ref="598a3330b3c21701223ee0ca14316eca" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>PI</b>&nbsp;&nbsp;&nbsp;3.14159265358979323846f</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="06e28c801ea48dde51889eb3c4836c78"></a><!-- doxytag: member="RicUtil.h::DTOR" ref="06e28c801ea48dde51889eb3c4836c78" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#06e28c801ea48dde51889eb3c4836c78">DTOR</a>&nbsp;&nbsp;&nbsp;PI/180.0f</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">degrees to radians <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3f9d9f3a98c4f2a91903545c72c7e12c"></a><!-- doxytag: member="RicUtil.h::RTOD" ref="3f9d9f3a98c4f2a91903545c72c7e12c" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#3f9d9f3a98c4f2a91903545c72c7e12c">RTOD</a>&nbsp;&nbsp;&nbsp;180.0f/PI</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">radians to degrees <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="86b7b8e83f31c708429ce71bf3dcf8b1"></a><!-- doxytag: member="RicUtil.h::MM_PER_IN" ref="86b7b8e83f31c708429ce71bf3dcf8b1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#86b7b8e83f31c708429ce71bf3dcf8b1">MM_PER_IN</a>&nbsp;&nbsp;&nbsp;25.4f</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">25.4 mm per inch <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c286b294f77050ea6433e9c6797e3c9e"></a><!-- doxytag: member="RicUtil.h::IN_PER_MM" ref="c286b294f77050ea6433e9c6797e3c9e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#c286b294f77050ea6433e9c6797e3c9e">IN_PER_MM</a>&nbsp;&nbsp;&nbsp;1.0f/MM_PER_IN</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">inches per mm <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="1bf02741902053ef14c10cef474bcfc2"></a><!-- doxytag: member="RicUtil.h::IN_PER_CM" ref="1bf02741902053ef14c10cef474bcfc2" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#1bf02741902053ef14c10cef474bcfc2">IN_PER_CM</a>&nbsp;&nbsp;&nbsp;10.0f*IN_PER_MM</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">inches per cm <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="534c6b8944f75edeb5e0611815d9592a"></a><!-- doxytag: member="RicUtil.h::ERRVAL" ref="534c6b8944f75edeb5e0611815d9592a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#534c6b8944f75edeb5e0611815d9592a">ERRVAL</a>&nbsp;&nbsp;&nbsp;(float)9999</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">table value for erroneous value <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0925c1d437e3ae3d24e558ffbbaff326"></a><!-- doxytag: member="RicUtil.h::dist_squ" ref="0925c1d437e3ae3d24e558ffbbaff326" args="(a, b)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>dist_squ</b>(a, b)&nbsp;&nbsp;&nbsp;(Dist_squ(&amp;(a),&amp;(b)))</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="baffe111056223973da8a6b704502ddf"></a><!-- doxytag: member="RicUtil.h::point_theta" ref="baffe111056223973da8a6b704502ddf" args="(p)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>point_theta</b>(p)&nbsp;&nbsp;&nbsp;((float)atan2((p).y, (p).x))</td></tr>

<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6960a95f0f447dc75d90d9f3995a200e"></a><!-- doxytag: member="RicUtil.h::Vector" ref="6960a95f0f447dc75d90d9f3995a200e" args="" -->
typedef <a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#6960a95f0f447dc75d90d9f3995a200e">Vector</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">3d vector <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6cd2a9d2c4cfb08d06f79bbc593e870f"></a><!-- doxytag: member="RicUtil.h::error_msg" ref="6cd2a9d2c4cfb08d06f79bbc593e870f" args="(char *msg)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#6cd2a9d2c4cfb08d06f79bbc593e870f">error_msg</a> (char *msg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Error message to stderr. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="a8e397f3db92c4658e0be342957018f2"></a><!-- doxytag: member="RicUtil.h::matrix" ref="a8e397f3db92c4658e0be342957018f2" args="(T ***mat, int nrow, int ncol)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#a8e397f3db92c4658e0be342957018f2">matrix</a> (T ***mat, int nrow, int ncol)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template version of 2D matrix memory allocation routines. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="80f029170299baf99a889fec097c019f"></a><!-- doxytag: member="RicUtil.h::free_matrix" ref="80f029170299baf99a889fec097c019f" args="(T **m)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#80f029170299baf99a889fec097c019f">free_matrix</a> (T **m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template version of 2D matrix memory free routines. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="0c8e258343ee1e74b3f9d6da8889074e"></a><!-- doxytag: member="RicUtil.h::matrix3D" ref="0c8e258343ee1e74b3f9d6da8889074e" args="(T ****mat, int nslice, int nrow, int ncol)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#0c8e258343ee1e74b3f9d6da8889074e">matrix3D</a> (T ****mat, int nslice, int nrow, int ncol)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template version of 3D matrix memory allocation routines. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="4dc7947a505653f2512c231d7879f969"></a><!-- doxytag: member="RicUtil.h::free_matrix3D" ref="4dc7947a505653f2512c231d7879f969" args="(T **m)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#4dc7947a505653f2512c231d7879f969">free_matrix3D</a> (T **m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template version of 2D matrix memory free routines. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#1b2270cf1d54a22e6bbe2edd86724e83">cart_to_cyl</a> (<a class="el" href="classPoint.html">Point</a> cart)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#718d1996cc315c0770798b6eb3767e48">cyl_to_cart</a> (<a class="el" href="structCylind.html">Cylind</a> cyl)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#a1fa27b21c2117888707c26d840c2a12">cart_to_cyl_deg</a> (<a class="el" href="classPoint.html">Point</a> cart)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#7a6b3c477042e9b5743d98014a5d1662">cyl_to_cart_deg</a> (<a class="el" href="structCylind.html">Cylind</a> cyl)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structSphere.html">Sphere</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#eb8aa73a227f3b400b8851b17ca4daf1">cart_to_sphere</a> (<a class="el" href="classPoint.html">Point</a> cart)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">DSphere&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#be293048f36824c2700fc4ec9348a9ba">cart_to_sphere</a> (<a class="el" href="classDPoint.html">DPoint</a> cart)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#089250eddc718e476ab3a1f83fa01579">sphere_to_cart</a> (<a class="el" href="structSphere.html">Sphere</a> sphere)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#91221ddf032711d1073472e12498e2fa">sphere_to_cart</a> (DSphere sphere)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#0b64710c8f93238fd1c94b878bbd182c">dist</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#a2ef6e2c9ccf760a689d019a8b47e903">ddist</a> (<a class="el" href="classDPoint.html">DPoint</a> p1, <a class="el" href="classDPoint.html">DPoint</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#cabead7577b077418fd56e696e0f1f01">distsqu</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#5fc68f83e23cd5d146e35f1759264369">cyldist</a> (<a class="el" href="structCylind.html">Cylind</a> p1, <a class="el" href="structCylind.html">Cylind</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#8b4f6ede67ddb808284c0967336a3e2c">cyldist2</a> (<a class="el" href="structCylind.html">Cylind</a> p1, <a class="el" href="structCylind.html">Cylind</a> p2, float *dval)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#331f705054ee305bb88ec8d94c6b326c">cyldistsqu</a> (<a class="el" href="structCylind.html">Cylind</a> p1, <a class="el" href="structCylind.html">Cylind</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#b543de2f098a66f2267f3ab5e45aacc5">int_sort</a> (int a[], int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#146566929be94cd9bcd765e12f676c17">float_sort</a> (float a[], int n)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">comparison routine for float_sort  <a href="#146566929be94cd9bcd765e12f676c17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#b6adffa39743d4872e5b14c62bac6767">theta_sort</a> (<a class="el" href="structCylind.html">Cylind</a> a[], int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#10402a6f2e73fe668df96644c6578b0d">y_sort</a> (<a class="el" href="classPoint.html">Point</a> a[], int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#b09fe5161f4f95428c7fe4b03252b80e">z_sort</a> (<a class="el" href="structCylind.html">Cylind</a> a[], int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#5955d507a423e41740925f38370e0070">z_sort</a> (<a class="el" href="classPoint.html">Point</a> a[], int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Vector</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#7f59568b00ce133027388027623ddb3b">cross_product</a> (<a class="el" href="classPoint.html">Point</a> pnt[])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="26f3d2e2ae4ec382e3d83f180b38c3af"></a><!-- doxytag: member="RicUtil.h::cross_product" ref="26f3d2e2ae4ec382e3d83f180b38c3af" args="(DPoint pnt[])" -->
<a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>cross_product</b> (<a class="el" href="classDPoint.html">DPoint</a> pnt[])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#e903d402a5fa72509ae00da8a711e2e1">dot_product</a> (<a class="el" href="classPoint.html">Vector</a> *v1, <a class="el" href="classPoint.html">Vector</a> *v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Vector</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#e1d64046c185cc110c6375b1fd13fcc9">normal_pnt</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2, <a class="el" href="classPoint.html">Point</a> p3)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ecca3773ae65dccad502e7dfada2178c"></a><!-- doxytag: member="RicUtil.h::normal_pnt" ref="ecca3773ae65dccad502e7dfada2178c" args="(DPoint p1, DPoint p2, DPoint p3)" -->
<a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>normal_pnt</b> (<a class="el" href="classDPoint.html">DPoint</a> p1, <a class="el" href="classDPoint.html">DPoint</a> p2, <a class="el" href="classDPoint.html">DPoint</a> p3)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#928b1da945af8413e422d1749058d33a">file_exist</a> (char *filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#501d630bff638037c3e7be254f1098bf">catrom_curve</a> (<a class="el" href="classPoint.html">Point</a> *pin, int nctrl, int step_size, float tension, int *noutpnts)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#c0b500908ddb016ef5a60608535c5c4d">line_thru_plane</a> (float a, float b, float c, float d, <a class="el" href="classPoint.html">Point</a> p0, <a class="el" href="classPoint.html">Point</a> p1)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#a45b7ea879e11789ad25cc3e3c6359f9">line_thru_triangle</a> (<a class="el" href="classPoint.html">Point</a> t0, <a class="el" href="classPoint.html">Point</a> t1, <a class="el" href="classPoint.html">Point</a> t2, <a class="el" href="classPoint.html">Point</a> p0, <a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> *pout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#385011832092f0b83ee3333232b44d9b">line_intersect_plane</a> (float a, float b, float c, float d, <a class="el" href="classPoint.html">Point</a> p0, <a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> *pout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#0cd6b3fb07e4d6fd2101c1de1673532b">equ_plane</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2, <a class="el" href="classPoint.html">Point</a> p3, float *a, float *b, float *c, float *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#cb748b408e38b5fd6f57551fdd009328">equ_plane2</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Vector</a> n1, float *a, float *b, float *c, float *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#5c3e4f52d6d1561d51e97da7b79ab666">Dist_squ</a> (<a class="el" href="classPoint.html">Point</a> *p1, <a class="el" href="classPoint.html">Point</a> *p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#c8f7adf4f7926fe3d33c7f318b2e5919">initialize_in_polygon</a> (<a class="el" href="classPoint.html">Point</a> *v, int npnts)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#b01a8ee7f9c5213385c32cff1279214f">in_polygon</a> (<a class="el" href="classPoint.html">Point</a> *v, int npnts, <a class="el" href="classPoint.html">Point</a> p)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#bc9102c63f392d8a96756ef4adca4d1e">in_polygon2</a> (<a class="el" href="classPoint.html">Point</a> *v, int n, <a class="el" href="classPoint.html">Point</a> p, int add_pi)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#c948b9c4fcb99b0f5ffb601536bd44d8">interpolate_along_z</a> (<a class="el" href="classPoint.html">Point</a> *p, float z)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#0db5c75ba8a72516e6b2bcfe66b6b182">circle_from_3pnts</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2, <a class="el" href="classPoint.html">Point</a> p3, <a class="el" href="classPoint.html">Point</a> *cp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#31ebd4992a60fc518435305db58d64e5">scale_array</a> (float newMin, float newMax, float *array, int l, int invert)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#527aab99cfd92ba88d750f86bf342892">splint</a> (float xa[], float ya[], float y2a[], int n, float x, float *y)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#a6510eb976d100f69e66ab457be35e06">spline</a> (float x[], float y[], int n, float yp1, float ypn, float y2[])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="396222a55982af0e43c4a7a319f3135d"></a><!-- doxytag: member="RicUtil.h::spline_d" ref="396222a55982af0e43c4a7a319f3135d" args="(double *, double *, int, double, double, double *)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>spline_d</b> (double *, double *, int, double, double, double *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="46b4ad9933f2baa3082ac1bef20ff1c3"></a><!-- doxytag: member="RicUtil.h::splint_d" ref="46b4ad9933f2baa3082ac1bef20ff1c3" args="(double *, double *, double *, int, double, double *)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>splint_d</b> (double *, double *, double *, int, double, double *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#e5a4ea0ceecad735c30781ece6e9edf8">angle_between_planes</a> (float a1, float b1, float c1, float a2, float b2, float c2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#3c58acbf6cc84114f931ba99a9e1ae32">dist_point_plane</a> (float a, float b, float c, float d, <a class="el" href="classPoint.html">Point</a> p0, <a class="el" href="classPoint.html">Point</a> *pout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#340da91d1bd7bd532520aa3269ff78a6">dist_point_line</a> (<a class="el" href="classPoint.html">Point</a> Pnt, <a class="el" href="classPoint.html">Point</a> LineStart, <a class="el" href="classPoint.html">Point</a> LineEnd, float *Distance, <a class="el" href="classPoint.html">Point</a> &amp;Pout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#e0b7a41b1d2f31882cc0dfed42257ea2">distpntlinespace</a> (<a class="el" href="classPoint.html">Point</a>, double, double, double, double, double, double)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#291bae738a51a1be6ae8b7b005acea7e">area_triangle</a> (float a, float b, float c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#070a58fbebcd680851bcb410fbe1de9f">area_triangle</a> (<a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2, <a class="el" href="classPoint.html">Point</a> p3)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#656b1d8c3558db2866a5fed2fc7f2025">inside_triangle</a> (<a class="el" href="classPoint.html">Point</a> t1, <a class="el" href="classPoint.html">Point</a> t2, <a class="el" href="classPoint.html">Point</a> t3, <a class="el" href="classPoint.html">Point</a> p)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#88d456a3dcc04aa84a4cbf5729b4a453">int_circle_line</a> (<a class="el" href="classPoint.html">Point</a> c, float r, <a class="el" href="classPoint.html">Point</a> p1, <a class="el" href="classPoint.html">Point</a> p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#49a1a8bfd1282f4265a9e52d92867a79">inbetween</a> (<a class="el" href="classPoint.html">Point</a> lp1, <a class="el" href="classPoint.html">Point</a> lp2, <a class="el" href="classPoint.html">Point</a> p)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classPoint.html">Point</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#dc449de40f5f502c48b1c1f092c62306">line_intersect</a> (<a class="el" href="classPoint.html">Point</a> p11, <a class="el" href="classPoint.html">Point</a> p12, <a class="el" href="classPoint.html">Point</a> p21, <a class="el" href="classPoint.html">Point</a> p22)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#bb5d04e6b343dff1e4067327e17c4b6b">sphere_line_intersection</a> (<a class="el" href="classPoint.html">Point</a> center, float r, <a class="el" href="classPoint.html">Point</a> l1, <a class="el" href="classPoint.html">Point</a> l2, <a class="el" href="classPoint.html">Point</a> *p1, <a class="el" href="classPoint.html">Point</a> *p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#1b3234039917d3276cbc5a6d1d31738a">splie2</a> (float x1a[], float x2a[], float **ya, int m, int n, float **y2a)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="RicUtil_8h.html#9cf1be1b2573f1d30200b8763485f388">splin2</a> (float x1a[], float x2a[], float **ya, float **y2a, int m, int n, float x1, float x2, float *y)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is the header file for the math utilities. There are matrix allocation routines, geometry routines, and coordinate conversion routines.<p>
This as been extended for use with RIC projects Bill Rogers <hr><h2>Function Documentation</h2>
<a class="anchor" name="e5a4ea0ceecad735c30781ece6e9edf8"></a><!-- doxytag: member="RicUtil.h::angle_between_planes" ref="e5a4ea0ceecad735c30781ece6e9edf8" args="(float a1, float b1, float c1, float a2, float b2, float c2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float angle_between_planes           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float angle_between_planes(float a1,float b1,float c1,float a2, float b2, float c2)<p>
a1,b1,c1 - coefficients of the equation for plane 1<br>
 a2,b2,c2 - coefficients of the equation for plane 2<br>
 Returns - the angle between the planes in radians<br>
<p>
Calculates the angle between two planes. The dot product of the normals divided by the product of their magnitudes gives the cosine of the angle. 
</div>
</div><p>
<a class="anchor" name="070a58fbebcd680851bcb410fbe1de9f"></a><!-- doxytag: member="RicUtil.h::area_triangle" ref="070a58fbebcd680851bcb410fbe1de9f" args="(Point p1, Point p2, Point p3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float area_triangle           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p3</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float area_triangle (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p2, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p3)<p>
a, b, c - triangle vertices<p>
This function returns the area of a triangle whose vertices are a, b, and c. If the legs are colinear or close to colinear, 0.0 is returned. 
</div>
</div><p>
<a class="anchor" name="291bae738a51a1be6ae8b7b005acea7e"></a><!-- doxytag: member="RicUtil.h::area_triangle" ref="291bae738a51a1be6ae8b7b005acea7e" args="(float a, float b, float c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float area_triangle           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float area_triangle (float a, float b, float c)<p>
a, b, c - lengths of sides<p>
This function returns the area of a triangle whose legs are length a, b, and c. If the legs are colinear or close to colinear, 0.0 is returned. 
</div>
</div><p>
<a class="anchor" name="1b2270cf1d54a22e6bbe2edd86724e83"></a><!-- doxytag: member="RicUtil.h::cart_to_cyl" ref="1b2270cf1d54a22e6bbe2edd86724e83" args="(Point cart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structCylind.html">Cylind</a> cart_to_cyl           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>cart</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> <a class="el" href="RicUtil_8h.html#1b2270cf1d54a22e6bbe2edd86724e83">cart_to_cyl(Point cart)</a><p>
cart - x y z cartisian coordinates<p>
This routine converts an xyz point to cylindrical coordinates. 
</div>
</div><p>
<a class="anchor" name="a1fa27b21c2117888707c26d840c2a12"></a><!-- doxytag: member="RicUtil.h::cart_to_cyl_deg" ref="a1fa27b21c2117888707c26d840c2a12" args="(Point cart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structCylind.html">Cylind</a> cart_to_cyl_deg           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>cart</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> <a class="el" href="RicUtil_8h.html#a1fa27b21c2117888707c26d840c2a12">cart_to_cyl_deg(Point cart)</a><p>
cart - x y z cartisian coordinates<p>
This routine converts an xyz point to cylindrical coordinates with theta in degrees. 
</div>
</div><p>
<a class="anchor" name="be293048f36824c2700fc4ec9348a9ba"></a><!-- doxytag: member="RicUtil.h::cart_to_sphere" ref="be293048f36824c2700fc4ec9348a9ba" args="(DPoint cart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DSphere cart_to_sphere           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td>
          <td class="paramname"> <em>cart</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
DSphere <a class="el" href="RicUtil_8h.html#be293048f36824c2700fc4ec9348a9ba">cart_to_sphere(DPoint cart)</a><p>
cart - x, y, z cartesian point Returns - a spherical point<p>
This routine converts a cartesian point to a point in spherical coordinates. Angles are in radians. 
</div>
</div><p>
<a class="anchor" name="eb8aa73a227f3b400b8851b17ca4daf1"></a><!-- doxytag: member="RicUtil.h::cart_to_sphere" ref="eb8aa73a227f3b400b8851b17ca4daf1" args="(Point cart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structSphere.html">Sphere</a> cart_to_sphere           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>cart</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="structSphere.html" title="3d point in spherical coordinates">Sphere</a> <a class="el" href="RicUtil_8h.html#eb8aa73a227f3b400b8851b17ca4daf1">cart_to_sphere(Point cart)</a><p>
cart - x, y, z cartesian point Returns - a spherical point<p>
This routine converts a cartesian point to a point in spherical coordinates. Angles are in radians. 
</div>
</div><p>
<a class="anchor" name="501d630bff638037c3e7be254f1098bf"></a><!-- doxytag: member="RicUtil.h::catrom_curve" ref="501d630bff638037c3e7be254f1098bf" args="(Point *pin, int nctrl, int step_size, float tension, int *noutpnts)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a>* catrom_curve           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>pin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nctrl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>step_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>tension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>noutpnts</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Point* catrom_curve (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *pin,int nctrl, int step_size, float tension, int *noutpnts) pin - array of input control points<br>
 nctrl - number of control points<br>
 step_size - sets num points to interpolate - see table below<br>
 tension - curve tension 0-1, 0 is tight to 1 which is loose<br>
 noutpnts - pointer to number of output points<br>
 returns - pointer to array of interpolated points or NULL on failure<br>
<p>
This function is derived from a TurboGeometry routine.<p>
Catmull-Rom curves interpolate through control points. To connect curve to the end points, specify the end points twice.<p>
table of step_size values whick indicate number of points between each control point. 0 - 100 1 - 50 2 - 25 3 - 20 4 - 10 5 - 5 6 - 2 
</div>
</div><p>
<a class="anchor" name="0db5c75ba8a72516e6b2bcfe66b6b182"></a><!-- doxytag: member="RicUtil.h::circle_from_3pnts" ref="0db5c75ba8a72516e6b2bcfe66b6b182" args="(Point p1, Point p2, Point p3, Point *cp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float circle_from_3pnts           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>cp</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int circle_3pnts (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p2, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p3, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *cp)<br>
 p1,p2,p3 - 3 points to determine circle from<br>
 cp - pointer to center point<br>
 returns radius on success, 0.0 on failure<br>
<p>
This function uses three points to define a circle. It is assumed that the circle is in the x-y plane. The z value is ignored. The radius value is returned on success else 0. 
</div>
</div><p>
<a class="anchor" name="7f59568b00ce133027388027623ddb3b"></a><!-- doxytag: member="RicUtil.h::cross_product" ref="7f59568b00ce133027388027623ddb3b" args="(Point pnt[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Vector</a> cross_product           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>pnt</em>[]          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Vector cross_product(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> pnt[])<p>
pnt - array of three points that define two vectors<br>
 Returns - the vector cross product<br>
<p>
Three points that define two vectors are passed to the routine. The cross product of the two vectors is returned as a vector. 
</div>
</div><p>
<a class="anchor" name="718d1996cc315c0770798b6eb3767e48"></a><!-- doxytag: member="RicUtil.h::cyl_to_cart" ref="718d1996cc315c0770798b6eb3767e48" args="(Cylind cyl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> cyl_to_cart           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>cyl</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> <a class="el" href="RicUtil_8h.html#7a6b3c477042e9b5743d98014a5d1662">cyl_to_cart_deg(Cylind cyl)</a><p>
cyl - cylindrical coordinates of point<p>
This routine converts a cylindrical point to xyz coordinates. 
</div>
</div><p>
<a class="anchor" name="7a6b3c477042e9b5743d98014a5d1662"></a><!-- doxytag: member="RicUtil.h::cyl_to_cart_deg" ref="7a6b3c477042e9b5743d98014a5d1662" args="(Cylind cyl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> cyl_to_cart_deg           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>cyl</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> <a class="el" href="RicUtil_8h.html#7a6b3c477042e9b5743d98014a5d1662">cyl_to_cart_deg(Cylind cyl)</a><p>
cyl - cylindrical coordinates of point<p>
This routine converts a cylindrical point to xyz coordinates. The theta values is in degrees. 
</div>
</div><p>
<a class="anchor" name="5fc68f83e23cd5d146e35f1759264369"></a><!-- doxytag: member="RicUtil.h::cyldist" ref="5fc68f83e23cd5d146e35f1759264369" args="(Cylind p1, Cylind p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float cyldist           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#5fc68f83e23cd5d146e35f1759264369">cyldist(Cylind p1,Cylind p2)</a><p>
p1,p2 - points in cylindrical coordinates<p>
this routine finds the difference between two <a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> points. 
</div>
</div><p>
<a class="anchor" name="8b4f6ede67ddb808284c0967336a3e2c"></a><!-- doxytag: member="RicUtil.h::cyldist2" ref="8b4f6ede67ddb808284c0967336a3e2c" args="(Cylind p1, Cylind p2, float *dval)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float cyldist2           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>dval</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#8b4f6ede67ddb808284c0967336a3e2c">cyldist2(Cylind p1,Cylind p2, float *dval)</a><p>
p1,p2 - points in cylindrical coordinates dval - pointer to distance between points<p>
this routine finds the difference between two <a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> points. 
</div>
</div><p>
<a class="anchor" name="331f705054ee305bb88ec8d94c6b326c"></a><!-- doxytag: member="RicUtil.h::cyldistsqu" ref="331f705054ee305bb88ec8d94c6b326c" args="(Cylind p1, Cylind p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float cyldistsqu           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#331f705054ee305bb88ec8d94c6b326c">cyldistsqu(Cylind p1,Cylind p2)</a><p>
p1,p2 - points in cylindrical coordinates<p>
this routine returns the square of the distance between two cylindrical points. 
</div>
</div><p>
<a class="anchor" name="a2ef6e2c9ccf760a689d019a8b47e903"></a><!-- doxytag: member="RicUtil.h::ddist" ref="a2ef6e2c9ccf760a689d019a8b47e903" args="(DPoint p1, DPoint p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ddist           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDPoint.html">DPoint</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#a2ef6e2c9ccf760a689d019a8b47e903">ddist(DPoint p1,DPoint p2)</a><p>
p1,p2 - points return distance between points<p>
this routine finds the difference between two points. 
</div>
</div><p>
<a class="anchor" name="0b64710c8f93238fd1c94b878bbd182c"></a><!-- doxytag: member="RicUtil.h::dist" ref="0b64710c8f93238fd1c94b878bbd182c" args="(Point p1, Point p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float dist           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#0b64710c8f93238fd1c94b878bbd182c">dist(Point p1,Point p2)</a><p>
p1,p2 - points return distance between points<p>
this routine finds the difference between two points. 
</div>
</div><p>
<a class="anchor" name="340da91d1bd7bd532520aa3269ff78a6"></a><!-- doxytag: member="RicUtil.h::dist_point_line" ref="340da91d1bd7bd532520aa3269ff78a6" args="(Point Pnt, Point LineStart, Point LineEnd, float *Distance, Point &amp;Pout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int dist_point_line           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>Pnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>LineStart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>LineEnd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>Distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Pout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
double dist_point_line(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> Pnt,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> LineStart, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> LineEnd, float *Distance, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> &amp;Pout )<p>
Pnt - input point LineStart - origin of line LineEnd - line endpoint Distance - distance between Pnt and line Pout - point on line nearest input point<p>
Calculates the perpendicular distance between a point and a line segment. It also calculates the point of on the line nearest the input point. If the point is not located perpendicular to the line, 0 is returned else 1 is returned on success. 
</div>
</div><p>
<a class="anchor" name="3c58acbf6cc84114f931ba99a9e1ae32"></a><!-- doxytag: member="RicUtil.h::dist_point_plane" ref="3c58acbf6cc84114f931ba99a9e1ae32" args="(float a, float b, float c, float d, Point p0, Point *pout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float dist_point_plane           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>pout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float dist_point_plane(float a,float b,float c,float d, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p0,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *pout)<p>
a,b,c,d - coefficients of plane equation ax + by + cz = d<br>
 p0 - point to check distance from<br>
 pout - the point on the plane where the normal from the point intersects<br>
 Returns - the normal distance from the point to the plane<br>
<p>
Finds the distance from a point to a plane along a normal. The textbook Calculus and Analytic Geometry by Thomas was used as a reference. 
</div>
</div><p>
<a class="anchor" name="5c3e4f52d6d1561d51e97da7b79ab666"></a><!-- doxytag: member="RicUtil.h::Dist_squ" ref="5c3e4f52d6d1561d51e97da7b79ab666" args="(Point *p1, Point *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Dist_squ           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float dist_squ(Point p1,Point p2)<p>
p1, p2 - The x,y,z data points to find the square of the distance between<br>
 Returns - the square of the distance between the points<br>
<p>
This routine calculates the square of the distance between two x, y, z points 
</div>
</div><p>
<a class="anchor" name="e0b7a41b1d2f31882cc0dfed42257ea2"></a><!-- doxytag: member="RicUtil.h::distpntlinespace" ref="e0b7a41b1d2f31882cc0dfed42257ea2" args="(Point, double, double, double, double, double, double)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double distpntlinespace           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>pnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>xo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>yo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>zo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>dz</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Distance between a point and a line 
</div>
</div><p>
<a class="anchor" name="cabead7577b077418fd56e696e0f1f01"></a><!-- doxytag: member="RicUtil.h::distsqu" ref="cabead7577b077418fd56e696e0f1f01" args="(Point p1, Point p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float distsqu           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#cabead7577b077418fd56e696e0f1f01">distsqu(Point p1,Point p2)</a><p>
p1,p2 - points return distance between points<p>
this routine finds the square of the distance between two points. 
</div>
</div><p>
<a class="anchor" name="e903d402a5fa72509ae00da8a711e2e1"></a><!-- doxytag: member="RicUtil.h::dot_product" ref="e903d402a5fa72509ae00da8a711e2e1" args="(Vector *v1, Vector *v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float dot_product           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Vector</a> *&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Vector</a> *&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
float <a class="el" href="RicUtil_8h.html#e903d402a5fa72509ae00da8a711e2e1">dot_product(Vector *v1, Vector *v2)</a><p>
v1, v2 - pointers to vectors to take dot product of<br>
 Returns - dot product<br>
<p>
This routine returns the product of two vectors (V1,V2) in 3D space. 
</div>
</div><p>
<a class="anchor" name="0cd6b3fb07e4d6fd2101c1de1673532b"></a><!-- doxytag: member="RicUtil.h::equ_plane" ref="0cd6b3fb07e4d6fd2101c1de1673532b" args="(Point p1, Point p2, Point p3, float *a, float *b, float *c, float *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equ_plane           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void equ_plane(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p1,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p2,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p3,float *a,float *b,float *c, float *d)<p>
p1,p2,p3 - three points through which the plane must pass<br>
 a,*b,*c,*d - pointers to coefficients of the plane equation<br>
 Returns - nothing<br>
<p>
Calculates the equation of a plane from three points. The coefficients of the equation ax + by + cz = d are passed as pointers to floats. 
</div>
</div><p>
<a class="anchor" name="cb748b408e38b5fd6f57551fdd009328"></a><!-- doxytag: member="RicUtil.h::equ_plane2" ref="cb748b408e38b5fd6f57551fdd009328" args="(Point p1, Vector n1, float *a, float *b, float *c, float *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equ_plane2           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Vector</a>&nbsp;</td>
          <td class="paramname"> <em>n1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void <a class="el" href="RicUtil_8h.html#cb748b408e38b5fd6f57551fdd009328">equ_plane2(Point p1,Vector n1,float *a,float *b,float *c,float *d)</a><p>
p1 - point on the plane<br>
 n1 - normal vector to the plane<br>
 a,*b,*c,*d - pointers to coefficients of the plane equation<br>
 Returns - nothing<br>
<p>
Calculates the equation of a plane from a point on the plane and a normal vector to the plane. The coefficients of the equation ax + by + cz = d are passed as pointers to floats. 
</div>
</div><p>
<a class="anchor" name="928b1da945af8413e422d1749058d33a"></a><!-- doxytag: member="RicUtil.h::file_exist" ref="928b1da945af8413e422d1749058d33a" args="(char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int file_exist           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>filename</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int <a class="el" href="RicUtil_8h.html#928b1da945af8413e422d1749058d33a">file_exist(char *filename)</a><p>
filename - name of file to check<br>
 returns 1 if file exists else 0<br>
<p>
checks to see if a file exists. If it does then 1 is returned else 0 is returned. 
</div>
</div><p>
<a class="anchor" name="146566929be94cd9bcd765e12f676c17"></a><!-- doxytag: member="RicUtil.h::float_sort" ref="146566929be94cd9bcd765e12f676c17" args="(float a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void float_sort           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
comparison routine for float_sort 
<p>
void float_sort(float a[],int n)<p>
a - array of floats to sort<br>
 n - number of floats in array<br>
 Returns - nothing<br>
<p>
This routine sorts an array of floats in ascending theta order using qsort. 
</div>
</div><p>
<a class="anchor" name="b01a8ee7f9c5213385c32cff1279214f"></a><!-- doxytag: member="RicUtil.h::in_polygon" ref="b01a8ee7f9c5213385c32cff1279214f" args="(Point *v, int npnts, Point p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int in_polygon           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>npnts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int in_polygon (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *v, int npnts, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p)<p>
This function returns 1 if a given point is in a given 2D polygon 
</div>
</div><p>
<a class="anchor" name="bc9102c63f392d8a96756ef4adca4d1e"></a><!-- doxytag: member="RicUtil.h::in_polygon2" ref="bc9102c63f392d8a96756ef4adca4d1e" args="(Point *v, int n, Point p, int add_pi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int in_polygon2           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>add_pi</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int in_polygon2 (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *v, int n, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p, int add_pi)<p>
This function wraps some of the ugliness of using in_polygon inside aoi_lasso_vertices. 
</div>
</div><p>
<a class="anchor" name="49a1a8bfd1282f4265a9e52d92867a79"></a><!-- doxytag: member="RicUtil.h::inbetween" ref="49a1a8bfd1282f4265a9e52d92867a79" args="(Point lp1, Point lp2, Point p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int inbetween           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>lp1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>lp2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int <a class="el" href="RicUtil_8h.html#49a1a8bfd1282f4265a9e52d92867a79">inbetween(Point lp1, Point lp2, Point p)</a><br>
 lp1,lp2 - end points on line<br>
 p - point to check<br>
 returns 1 if p is between lp1 and lp2<br>
<p>
This function checks to see if a 2D point is between the end points of a line segment. If so then 1 is returned. 
</div>
</div><p>
<a class="anchor" name="c8f7adf4f7926fe3d33c7f318b2e5919"></a><!-- doxytag: member="RicUtil.h::initialize_in_polygon" ref="c8f7adf4f7926fe3d33c7f318b2e5919" args="(Point *v, int npnts)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void initialize_in_polygon           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>npnts</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int initialize_in_polygon (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *v, int npnts)<p>
This function is used to initialize the in_polygon function. It precalculates some numbers used in the loop. 
</div>
</div><p>
<a class="anchor" name="656b1d8c3558db2866a5fed2fc7f2025"></a><!-- doxytag: member="RicUtil.h::inside_triangle" ref="656b1d8c3558db2866a5fed2fc7f2025" args="(Point t1, Point t2, Point t3, Point p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int inside_triangle           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int inside_triange (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t2, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t3, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p)<p>
t1, t2, t3 - vertices of a triangle<br>
 p - point inside or outside triangle<br>
<p>
This function returns 1 iff the triangle defined by t1, t2, and t3 contains the point p. This is done by adding the areas of the three triangles obtained by joining the vertices with the point and comparing the sum the the area of the main triangle; if they are equal, the point is inside; otherwise, it is outside. 
</div>
</div><p>
<a class="anchor" name="88d456a3dcc04aa84a4cbf5729b4a453"></a><!-- doxytag: member="RicUtil.h::int_circle_line" ref="88d456a3dcc04aa84a4cbf5729b4a453" args="(Point c, float r, Point p1, Point p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int int_circle_line           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
function int_circle_line index int_circle_line<p>
int int_circle_line (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> c, float r, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p2)<br>
 c - center of circle<br>
 r - radius of circle<br>
 p1,p2 - end points of line<br>
 returns 1 if there is an intersection<br>
<p>
This function checks to see if a 2d line intersects a 2d circle. This is derived from TGL subroutine code. If there is no intersection or the line is tangent then 0 is returned. If there are two intersections the 1 is returned. 
</div>
</div><p>
<a class="anchor" name="b543de2f098a66f2267f3ab5e45aacc5"></a><!-- doxytag: member="RicUtil.h::int_sort" ref="b543de2f098a66f2267f3ab5e45aacc5" args="(int a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void int_sort           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void int_sort(int a[],int n)<p>
a - array of ints to sort<br>
 n - number of ints in array<br>
 Returns - nothing<br>
<p>
This routine sorts an array of ints in ascending theta order. 
</div>
</div><p>
<a class="anchor" name="c948b9c4fcb99b0f5ffb601536bd44d8"></a><!-- doxytag: member="RicUtil.h::interpolate_along_z" ref="c948b9c4fcb99b0f5ffb601536bd44d8" args="(Point *p, float z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> interpolate_along_z           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>z</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> interpolate_along_z (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p, z)<br>
 p - array of two points for high and low<br>
 z - value to interpolate to<br>
 returns interpolated point<br>
<p>
This function interpolates between the two points passed to it to determine the x and y values of a point at the passed z level. The interpolated point is returned. It does not check to see that the z is between the two points so is is possible to extrapolate 
</div>
</div><p>
<a class="anchor" name="dc449de40f5f502c48b1c1f092c62306"></a><!-- doxytag: member="RicUtil.h::line_intersect" ref="dc449de40f5f502c48b1c1f092c62306" args="(Point p11, Point p12, Point p21, Point p22)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> line_intersect           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p11</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p12</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p21</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p22</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> line_intersect (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p11, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p12, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p21, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p22)<p>
p11,p12 - defines first line<br>
 p21,p22 - defines second line<br>
<p>
This function returns point of intersection between two lines. This is a 2d routine that only uses x and y 
</div>
</div><p>
<a class="anchor" name="385011832092f0b83ee3333232b44d9b"></a><!-- doxytag: member="RicUtil.h::line_intersect_plane" ref="385011832092f0b83ee3333232b44d9b" args="(float a, float b, float c, float d, Point p0, Point p1, Point *pout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int line_intersect_plane           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>pout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int line_intersect_plane(float a,float b,float c,float d,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p0, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p1,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *pout)<p>
a,b,c,d - coefficients of plane equation ax + by + cz = d<br>
 p0,p1 - end points of vector intersecting plane<br>
 pout - the intersection of the line segment and the plane.<br>
 Returns - 1 if line intersects plane, 0 if not<br>
<p>
Finds the point of intersetion between and line and a plane. If the line between p1 and p2 intersects the plane then 1 is returned. If the line segment does not intersect the plane then 0 is returned. Pout is the point of intersection. 
</div>
</div><p>
<a class="anchor" name="c0b500908ddb016ef5a60608535c5c4d"></a><!-- doxytag: member="RicUtil.h::line_thru_plane" ref="c0b500908ddb016ef5a60608535c5c4d" args="(float a, float b, float c, float d, Point p0, Point p1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> line_thru_plane           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> <a class="el" href="RicUtil_8h.html#c0b500908ddb016ef5a60608535c5c4d">line_thru_plane(float a,float b,float c,float d,Point p0,Point p1)</a><p>
a,b,c,d - coefficients of plane equation ax + by + cz = d<br>
 p0,p1 - end points of vector intersecting plane<br>
 Returns - the point of intersection between line and plane<br>
<p>
Finds the point of intersetion between and line and a plane. If the line segment described by p0 and p1 does not go through the plane then an extension of the line segment is used. 
</div>
</div><p>
<a class="anchor" name="a45b7ea879e11789ad25cc3e3c6359f9"></a><!-- doxytag: member="RicUtil.h::line_thru_triangle" ref="a45b7ea879e11789ad25cc3e3c6359f9" args="(Point t0, Point t1, Point t2, Point p0, Point p1, Point *pout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int line_thru_triangle           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>t2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>pout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int line_thru_triangle(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t0,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t1,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> t2,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p0,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> p1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *pout) t0,t1,t2 - triangle points<br>
 p0,p1 - line points<br>
 pout - pointer to output point<br>
 returns 1 one if line intersects triangle<br>
<p>
Finds the point of intersetion between and line and a triangle. 
</div>
</div><p>
<a class="anchor" name="e1d64046c185cc110c6375b1fd13fcc9"></a><!-- doxytag: member="RicUtil.h::normal_pnt" ref="e1d64046c185cc110c6375b1fd13fcc9" args="(Point p1, Point p2, Point p3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Vector</a> normal_pnt           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>p3</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Vector <a class="el" href="RicUtil_8h.html#e1d64046c185cc110c6375b1fd13fcc9">normal_pnt(Point p1, Point p2, Point p3)</a><p>
p1,p2,p3 - points - p2 is connecting point Returns - the normal vector<p>
Returns a normal vector created from the 3 connected points passed to the routine. 
</div>
</div><p>
<a class="anchor" name="31ebd4992a60fc518435305db58d64e5"></a><!-- doxytag: member="RicUtil.h::scale_array" ref="31ebd4992a60fc518435305db58d64e5" args="(float newMin, float newMax, float *array, int l, int invert)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int scale_array           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>newMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>newMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>l</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>invert</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int <a class="el" href="RicUtil_8h.html#31ebd4992a60fc518435305db58d64e5">scale_array(float newMin, float newMax, float *array, int l, int invert)</a><br>
 newMin,newMax - range to scale to<br>
 array - array of data<br>
 l - length of array<br>
 invert - invert - make negative<br>
 returns 1 on success<br>
<p>
This function scales an array between min and max values. It will make a negative image if invert is 1 
</div>
</div><p>
<a class="anchor" name="bb5d04e6b343dff1e4067327e17c4b6b"></a><!-- doxytag: member="RicUtil.h::sphere_line_intersection" ref="bb5d04e6b343dff1e4067327e17c4b6b" args="(Point center, float r, Point l1, Point l2, Point *p1, Point *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int sphere_line_intersection           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>l1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>l2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a> *&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
int sphere_line_intersection (<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> center, float r, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> l1, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> l2, <a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p1 ,<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> *p2) center - center of sphere<br>
 r - radius of sphere<br>
 11,12 - points on line<br>
 p1, p2 - pointers to intersection points<br>
 returns number of intersections intersection<br>
<p>
This function checks to see if a line intersects a sphere. The intersection points are calculated. The return value is the number if intersections where 1 intersection indicates the line is tangent. 
</div>
</div><p>
<a class="anchor" name="91221ddf032711d1073472e12498e2fa"></a><!-- doxytag: member="RicUtil.h::sphere_to_cart" ref="91221ddf032711d1073472e12498e2fa" args="(DSphere sphere)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDPoint.html">DPoint</a> sphere_to_cart           </td>
          <td>(</td>
          <td class="paramtype">DSphere&nbsp;</td>
          <td class="paramname"> <em>sphere</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> sphere_to_cart(Point cart)<p>
cart - a point in spherical points Returns - a cartesian point<p>
This routine converts a spherical point to a point in cartesian coordinates. Angles are in radians. 
</div>
</div><p>
<a class="anchor" name="089250eddc718e476ab3a1f83fa01579"></a><!-- doxytag: member="RicUtil.h::sphere_to_cart" ref="089250eddc718e476ab3a1f83fa01579" args="(Sphere sphere)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPoint.html">Point</a> sphere_to_cart           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structSphere.html">Sphere</a>&nbsp;</td>
          <td class="paramname"> <em>sphere</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> sphere_to_cart(Point cart)<p>
cart - a point in spherical points Returns - a cartesian point<p>
This routine converts a spherical point to a point in cartesian coordinates. Angles are in radians. 
</div>
</div><p>
<a class="anchor" name="1b3234039917d3276cbc5a6d1d31738a"></a><!-- doxytag: member="RicUtil.h::splie2" ref="1b3234039917d3276cbc5a6d1d31738a" args="(float x1a[], float x2a[], float **ya, int m, int n, float **y2a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void splie2           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x1a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x2a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&nbsp;</td>
          <td class="paramname"> <em>ya</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&nbsp;</td>
          <td class="paramname"> <em>y2a</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
function spline routines<p>
This spline function is from NR in C. It has been converted from origin 1 to origin 0. 
</div>
</div><p>
<a class="anchor" name="9cf1be1b2573f1d30200b8763485f388"></a><!-- doxytag: member="RicUtil.h::splin2" ref="9cf1be1b2573f1d30200b8763485f388" args="(float x1a[], float x2a[], float **ya, float **y2a, int m, int n, float x1, float x2, float *y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void splin2           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x1a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x2a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&nbsp;</td>
          <td class="paramname"> <em>ya</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&nbsp;</td>
          <td class="paramname"> <em>y2a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
function spline routines<p>
This spline function is from NR in C. It has been converted from origin 1 to origin 0. 
</div>
</div><p>
<a class="anchor" name="a6510eb976d100f69e66ab457be35e06"></a><!-- doxytag: member="RicUtil.h::spline" ref="a6510eb976d100f69e66ab457be35e06" args="(float x[], float y[], int n, float yp1, float ypn, float y2[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void spline           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>y</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>yp1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ypn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>y2</em>[]</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
function spline routines<p>
This spline function is from NR in C. It has been converted from origin 1 to origin 0. 
</div>
</div><p>
<a class="anchor" name="527aab99cfd92ba88d750f86bf342892"></a><!-- doxytag: member="RicUtil.h::splint" ref="527aab99cfd92ba88d750f86bf342892" args="(float xa[], float ya[], float y2a[], int n, float x, float *y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void splint           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>xa</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ya</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>y2a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
function spline routines<p>
This spline function is from NR in C. It has been converted from origin 1 to origin 0. 
</div>
</div><p>
<a class="anchor" name="b6adffa39743d4872e5b14c62bac6767"></a><!-- doxytag: member="RicUtil.h::theta_sort" ref="b6adffa39743d4872e5b14c62bac6767" args="(Cylind a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void theta_sort           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void theta_sort(<a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> a[],int n)<p>
a - array of cylindrical points to sort<br>
 n - number of cylindrical points in array<br>
 Returns - nothing<p>
This routine sorts an array of cylindrical points in ascending theta order. 
</div>
</div><p>
<a class="anchor" name="10402a6f2e73fe668df96644c6578b0d"></a><!-- doxytag: member="RicUtil.h::y_sort" ref="10402a6f2e73fe668df96644c6578b0d" args="(Point a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void y_sort           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void y_sort(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> a[],int n)<p>
a - array of points to sort<br>
 n - number of points in array<br>
 Returns - nothing<br>
<p>
This routine sorts an array of points in ascending y order. 
</div>
</div><p>
<a class="anchor" name="5955d507a423e41740925f38370e0070"></a><!-- doxytag: member="RicUtil.h::z_sort" ref="5955d507a423e41740925f38370e0070" args="(Point a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void z_sort           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classPoint.html">Point</a>&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void z_sort(<a class="el" href="classPoint.html" title="XYZ floating point class.">Point</a> a[],int n)<p>
a - array of points to sort<br>
 n - number of points in array<br>
 Returns - nothing<br>
<p>
This routine sorts an array of points in ascending z order. 
</div>
</div><p>
<a class="anchor" name="b09fe5161f4f95428c7fe4b03252b80e"></a><!-- doxytag: member="RicUtil.h::z_sort" ref="b09fe5161f4f95428c7fe4b03252b80e" args="(Cylind a[], int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void z_sort           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structCylind.html">Cylind</a>&nbsp;</td>
          <td class="paramname"> <em>a</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
void z_sort(<a class="el" href="structCylind.html" title="3d cylindrical point - float">Cylind</a> a[],int n)<p>
a - array of cylindrical points to sort<br>
 n - number of cylindrical points in array<br>
 Returns - nothing<br>
<p>
This routine sorts an array of cylindrical points in ascending z order. 
</div>
</div><p>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri Nov 7 10:33:33 2008 for RicUtil by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>
