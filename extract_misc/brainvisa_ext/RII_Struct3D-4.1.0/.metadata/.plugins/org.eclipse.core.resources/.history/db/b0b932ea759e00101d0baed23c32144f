<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>RicUtil: src/RicMatrix.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>src/RicMatrix.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// 3D Matrix class from 3dKindoms</span>
<a name="l00002"></a>00002 <span class="comment">// Modified slightly for RIC use</span>
<a name="l00003"></a>00003 <span class="comment">// All angles in radians</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#ifndef CMatrix_h</span>
<a name="l00006"></a>00006 <span class="preprocessor"></span><span class="preprocessor">#define CMatrix_h</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span>
<a name="l00008"></a>00008 <span class="preprocessor">#include "RicPoint.h"</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="keyword">class </span>CMatrix 
<a name="l00012"></a>00012 {
<a name="l00013"></a>00013 <span class="keyword">public</span>:
<a name="l00014"></a>00014 <span class="comment">// Data</span>
<a name="l00015"></a>00015         <span class="keywordtype">float</span> mf[ 16 ];
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="comment">// Functions</span>
<a name="l00018"></a>00018         CMatrix( <span class="keyword">const</span> <span class="keywordtype">int</span> bIdentity = <span class="keyword">true</span> )
<a name="l00019"></a>00019         {
<a name="l00020"></a>00020                 <span class="keywordflow">if</span> ( bIdentity ) Identity();
<a name="l00021"></a>00021         }
<a name="l00022"></a>00022 
<a name="l00023"></a>00023         <span class="keywordtype">void</span> Identity( )
<a name="l00024"></a>00024         {
<a name="l00025"></a>00025                 mf[ 0] = 1.0f;    mf[ 1] = 0.0f;      mf[ 2] = 0.0f;    mf[ 3] = 0.0f;  
<a name="l00026"></a>00026                 mf[ 4] = 0.0f;    mf[ 5] = 1.0f;      mf[ 6] = 0.0f;    mf[ 7] = 0.0f;  
<a name="l00027"></a>00027                 mf[ 8] = 0.0f;    mf[ 9] = 0.0f;      mf[10] = 1.0f;    mf[11] = 0.0f;  
<a name="l00028"></a>00028                 mf[12] = 0.0f;    mf[13] = 0.0f;      mf[14] = 0.0f;    mf[15] = 1.0f;
<a name="l00029"></a>00029         }
<a name="l00030"></a>00030 
<a name="l00031"></a>00031         <span class="comment">// Concatenate 2 matrices with the * operator</span>
<a name="l00032"></a>00032         <span class="keyword">inline</span> CMatrix operator* (<span class="keyword">const</span> CMatrix &amp;InM)<span class="keyword"> const</span>
<a name="l00033"></a>00033 <span class="keyword">        </span>{
<a name="l00034"></a>00034                 CMatrix Result( 0 );
<a name="l00035"></a>00035                 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;16;i+=4)
<a name="l00036"></a>00036                 {
<a name="l00037"></a>00037                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0;j&lt;4;j++)
<a name="l00038"></a>00038                         {
<a name="l00039"></a>00039                         Result.mf[i + j] = mf[ i + 0] * InM.mf[ 0 + j] + mf[ i + 1] * InM.mf[ 4 + j]
<a name="l00040"></a>00040                                 + mf[ i + 2] * InM.mf[ 8 + j] + mf[ i + 3] * InM.mf[ 12 + j];
<a name="l00041"></a>00041                         }
<a name="l00042"></a>00042                 }
<a name="l00043"></a>00043                 <span class="keywordflow">return</span> Result;
<a name="l00044"></a>00044         }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         <span class="comment">// Use a matrix to transform a 3D point with the * operator</span>
<a name="l00047"></a>00047         <span class="keyword">inline</span> <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a> operator* (<span class="keyword">const</span> <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a> &amp;Pnt )<span class="keyword"> const</span>
<a name="l00048"></a>00048 <span class="keyword">        </span>{
<a name="l00049"></a>00049                 <span class="keywordtype">float</span> x = Pnt.<a class="code" href="classPoint.html#05dfe2dfbde813ad234b514f30e662f1">x</a>*mf[0] + Pnt.<a class="code" href="classPoint.html#6101960c8d2d4e8ea1d32c9234bbeb8d">y</a>*mf[4] + Pnt.<a class="code" href="classPoint.html#9a666531e0e99adff132be93d2407d0c">z</a>*mf[8]  + mf[12];
<a name="l00050"></a>00050                 <span class="keywordtype">float</span> y = Pnt.<a class="code" href="classPoint.html#05dfe2dfbde813ad234b514f30e662f1">x</a>*mf[1] + Pnt.<a class="code" href="classPoint.html#6101960c8d2d4e8ea1d32c9234bbeb8d">y</a>*mf[5] + Pnt.<a class="code" href="classPoint.html#9a666531e0e99adff132be93d2407d0c">z</a>*mf[9]  + mf[13];
<a name="l00051"></a>00051                 <span class="keywordtype">float</span> z = Pnt.<a class="code" href="classPoint.html#05dfe2dfbde813ad234b514f30e662f1">x</a>*mf[2] + Pnt.<a class="code" href="classPoint.html#6101960c8d2d4e8ea1d32c9234bbeb8d">y</a>*mf[6] + Pnt.<a class="code" href="classPoint.html#9a666531e0e99adff132be93d2407d0c">z</a>*mf[10] + mf[14]; 
<a name="l00052"></a>00052                 <span class="keywordflow">return</span> <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a>(x,y,z);
<a name="l00053"></a>00053         }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="comment">// Rotate the *this matrix fRad counter-clockwise around a single axis( either x, y, or z )</span>
<a name="l00056"></a>00056         <span class="keywordtype">void</span> <a class="code" href="classRotate.html" title="class for rotating points about an axis">Rotate</a>( <span class="keywordtype">float</span> fRad, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z )
<a name="l00057"></a>00057         {
<a name="l00058"></a>00058                 CMatrix Temp;
<a name="l00059"></a>00059                 <span class="keywordflow">if</span> (x == 1) Temp.RotX( -fRad );
<a name="l00060"></a>00060                 <span class="keywordflow">if</span> (y == 1) Temp.RotY( -fRad );
<a name="l00061"></a>00061                 <span class="keywordflow">if</span> (z == 1) Temp.RotZ( -fRad );
<a name="l00062"></a>00062                 *<span class="keyword">this</span> = Temp * (*this);
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         <span class="keywordtype">void</span> Scale( <span class="keywordtype">float</span> sx, <span class="keywordtype">float</span> sy, <span class="keywordtype">float</span> sz )
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067                 <span class="keywordtype">int</span> x;
<a name="l00068"></a>00068                 <span class="keywordflow">for</span> (x = 0; x &lt;  4; x++) mf[x]*=sx;
<a name="l00069"></a>00069                 <span class="keywordflow">for</span> (x = 4; x &lt;  8; x++) mf[x]*=sy;
<a name="l00070"></a>00070                 <span class="keywordflow">for</span> (x = 8; x &lt; 12; x++) mf[x]*=sz;
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         <span class="keywordtype">void</span> Translate( <span class="keyword">const</span> <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a> &amp;Test )
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075                 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0;j&lt;4;j++)
<a name="l00076"></a>00076                 {
<a name="l00077"></a>00077                         mf[12+j] += Test.<a class="code" href="classPoint.html#05dfe2dfbde813ad234b514f30e662f1">x</a> * mf[j] + Test.<a class="code" href="classPoint.html#6101960c8d2d4e8ea1d32c9234bbeb8d">y</a> * mf[4+j] + Test.<a class="code" href="classPoint.html#9a666531e0e99adff132be93d2407d0c">z</a> * mf[8+j]; 
<a name="l00078"></a>00078                 }        
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080         
<a name="l00081"></a>00081         <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a> GetTranslate( )
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083                 <span class="keywordflow">return</span> <a class="code" href="classPoint.html" title="XYZ floating point class.">Point</a>( mf[12], mf[13], mf[14] );
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085         
<a name="l00086"></a>00086         <span class="comment">// Zero out the translation part of the matrix</span>
<a name="l00087"></a>00087         CMatrix RotationOnly( )
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089                 CMatrix Temp = *<span class="keyword">this</span>;
<a name="l00090"></a>00090                 Temp.mf[12] = 0;
<a name="l00091"></a>00091                 Temp.mf[13] = 0;
<a name="l00092"></a>00092                 Temp.mf[14] = 0;
<a name="l00093"></a>00093                 <span class="keywordflow">return</span> Temp;
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095         
<a name="l00096"></a>00096         <span class="comment">// transpose the rows and columns</span>
<a name="l00097"></a>00097         CMatrix Transpose()
<a name="l00098"></a>00098         {
<a name="l00099"></a>00099                         CMatrix Temp;
<a name="l00100"></a>00100                         Temp.mf[0] = mf[0];
<a name="l00101"></a>00101                         Temp.mf[1] = mf[4];
<a name="l00102"></a>00102                         Temp.mf[2] = mf[8];
<a name="l00103"></a>00103                         Temp.mf[3] = mf[12];
<a name="l00104"></a>00104                         Temp.mf[4] = mf[1];
<a name="l00105"></a>00105                         Temp.mf[5] = mf[5];
<a name="l00106"></a>00106                         Temp.mf[6] = mf[9];
<a name="l00107"></a>00107                         Temp.mf[7] = mf[13];
<a name="l00108"></a>00108                         Temp.mf[8] = mf[2];
<a name="l00109"></a>00109                         Temp.mf[9] = mf[6];
<a name="l00110"></a>00110                         Temp.mf[10] = mf[10];
<a name="l00111"></a>00111                         Temp.mf[11] = mf[14];
<a name="l00112"></a>00112                         Temp.mf[12] = mf[3];
<a name="l00113"></a>00113                         Temp.mf[13] = mf[7];
<a name="l00114"></a>00114                         Temp.mf[14] = mf[11];
<a name="l00115"></a>00115                         Temp.mf[15] = mf[15];
<a name="l00116"></a>00116                         <span class="keywordflow">return</span> Temp;
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118         
<a name="l00119"></a>00119         <span class="comment">// Create a rotation matrix for a counter-clockwise rotation of fRad around an arbitrary axis(x, y, z)</span>
<a name="l00120"></a>00120         <span class="keywordtype">void</span> RotateMatrix( <span class="keywordtype">float</span> fRad, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z)
<a name="l00121"></a>00121         {
<a name="l00122"></a>00122                 Identity();
<a name="l00123"></a>00123                 <span class="keywordtype">float</span> cosA = cosf(fRad);
<a name="l00124"></a>00124                 <span class="keywordtype">float</span> sinA = sinf(fRad);
<a name="l00125"></a>00125                 <span class="keywordtype">float</span> m = 1.0f - cosA;
<a name="l00126"></a>00126                 mf[0] = cosA + x*x*m;
<a name="l00127"></a>00127                 mf[5] = cosA + y*y*m;
<a name="l00128"></a>00128                 mf[10]= cosA + z*z*m;
<a name="l00129"></a>00129                 
<a name="l00130"></a>00130                 <span class="keywordtype">float</span> tmp1 = x*y*m;
<a name="l00131"></a>00131                 
<a name="l00132"></a>00132                 <span class="keywordtype">float</span> tmp2 = z*sinA;
<a name="l00133"></a>00133                 mf[4] = tmp1 + tmp2;
<a name="l00134"></a>00134                 mf[1] = tmp1 - tmp2;
<a name="l00135"></a>00135                 
<a name="l00136"></a>00136                 tmp1 = x*z*m;
<a name="l00137"></a>00137                 tmp2 = y*sinA;
<a name="l00138"></a>00138                 mf[8] = tmp1 - tmp2;
<a name="l00139"></a>00139                 mf[2] = tmp1 + tmp2;
<a name="l00140"></a>00140                 
<a name="l00141"></a>00141                 tmp1 = y*z*m;
<a name="l00142"></a>00142                 tmp2 = x*sinA;
<a name="l00143"></a>00143                 mf[9] = tmp1 + tmp2;
<a name="l00144"></a>00144                 mf[6] = tmp1 - tmp2;
<a name="l00145"></a>00145         }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <span class="comment">// Simple but not robust matrix inversion. (Doesn't work properly if there is a scaling or skewing transformation.)</span>
<a name="l00148"></a>00148         <span class="keyword">inline</span> CMatrix InvertSimple()
<a name="l00149"></a>00149         {
<a name="l00150"></a>00150                 CMatrix R(0);
<a name="l00151"></a>00151                 R.mf[0]  = mf[0];               R.mf[1]  = mf[4];               R.mf[2]  = mf[8];       R.mf[3]  = 0.0f;
<a name="l00152"></a>00152                 R.mf[4]  = mf[1];               R.mf[5]  = mf[5];               R.mf[6]  = mf[9];       R.mf[7]  = 0.0f;
<a name="l00153"></a>00153                 R.mf[8]  = mf[2];               R.mf[9]  = mf[6];               R.mf[10] = mf[10];      R.mf[11] = 0.0f;
<a name="l00154"></a>00154                 R.mf[12] = -(mf[12]*mf[0]) - (mf[13]*mf[1]) - (mf[14]*mf[2]);
<a name="l00155"></a>00155                 R.mf[13] = -(mf[12]*mf[4]) - (mf[13]*mf[5]) - (mf[14]*mf[6]);
<a name="l00156"></a>00156                 R.mf[14] = -(mf[12]*mf[8]) - (mf[13]*mf[9]) - (mf[14]*mf[10]);
<a name="l00157"></a>00157                 R.mf[15] = 1.0f;
<a name="l00158"></a>00158                 <span class="keywordflow">return</span> R;
<a name="l00159"></a>00159         }
<a name="l00160"></a>00160         
<a name="l00161"></a>00161         <span class="comment">// Invert for only a rotation, any translation is zeroed out</span>
<a name="l00162"></a>00162         CMatrix InvertRot( )
<a name="l00163"></a>00163         {
<a name="l00164"></a>00164                 CMatrix R( 0 );
<a name="l00165"></a>00165                 R.mf[0]  = mf[0];               R.mf[1]  = mf[4];               R.mf[2]  = mf[8];       R.mf[3]  = 0.0f;
<a name="l00166"></a>00166                 R.mf[4]  = mf[1];               R.mf[5]  = mf[5];               R.mf[6]  = mf[9];       R.mf[7]  = 0.0f;
<a name="l00167"></a>00167                 R.mf[8]  = mf[2];               R.mf[9]  = mf[6];               R.mf[10] = mf[10];      R.mf[11] = 0.0f;
<a name="l00168"></a>00168                 R.mf[12] = 0;                   R.mf[13] = 0;                   R.mf[14] = 0;           R.mf[15] = 1.0f;
<a name="l00169"></a>00169                 <span class="keywordflow">return</span> R;
<a name="l00170"></a>00170         }       
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="keyword">private</span>:
<a name="l00174"></a>00174         <span class="comment">// helpers for Rotate</span>
<a name="l00175"></a>00175         <span class="keywordtype">void</span> RotX(<span class="keywordtype">float</span> angle)
<a name="l00176"></a>00176         {  
<a name="l00177"></a>00177                 mf[5]  = cosf(angle);
<a name="l00178"></a>00178                 mf[6]  = sinf(angle);
<a name="l00179"></a>00179                 mf[9]  = -sinf(angle);
<a name="l00180"></a>00180                 mf[10] = cosf(angle);
<a name="l00181"></a>00181         }
<a name="l00182"></a>00182         <span class="keywordtype">void</span> RotY(<span class="keywordtype">float</span> angle)
<a name="l00183"></a>00183         {
<a name="l00184"></a>00184                 mf[0]  =  cosf(angle);
<a name="l00185"></a>00185                 mf[2]  =  -sinf(angle);
<a name="l00186"></a>00186                 mf[8]  =  sinf(angle);
<a name="l00187"></a>00187                 mf[10] =  cosf(angle);    
<a name="l00188"></a>00188         }
<a name="l00189"></a>00189         <span class="keywordtype">void</span> RotZ(<span class="keywordtype">float</span> angle)
<a name="l00190"></a>00190         {
<a name="l00191"></a>00191                 mf[0] =  cosf(angle);
<a name="l00192"></a>00192                 mf[1] =  sinf(angle);
<a name="l00193"></a>00193                 mf[4] =  -sinf(angle);
<a name="l00194"></a>00194                 mf[5] =  cosf(angle);
<a name="l00195"></a>00195         }
<a name="l00196"></a>00196 };
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 <span class="preprocessor">#endif</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri Nov 7 10:33:32 2008 for RicUtil by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>
