# This code is a simple hyperquadratic Baseyain classifier. The training set in the begining is created by matlab 
# for tow-dimensional multivariate normal distribution with following mean and coveriance matrix.
#
#######  mu = [2 3 1 .5];
#######  SIGMA = [1 1/2 1/10 1/25; 1/2 4 1/32 1/5; 1/10 1/32 6 1/8; 1/25 1/5 1/8 3];
#######  r1 = mvnrnd(mu,SIGMA,50);
#######   
#######  mu = [-2 -3 -1 -.5];
#######  SIGMA = [1 1/2 1/10 1/25; 1/2 4 1/32 1/5; 1/10 1/32 6 1/8; 1/25 1/5 1/8 3];
#######  r2 = mvnrnd(mu,SIGMA,100);
#######  
#######  mu = [20 .3 10 .5];
#######  SIGMA = [1 1/2 1/10 1/25; 1/2 4 1/32 1/5; 1/10 1/32 6 1/8; 1/25 1/5 1/8 3];
#######  r3 = mvnrnd(mu,SIGMA,10);
#
# Even though the training set here has only four features the code is written in a general case of N-dimensioanl
# cases. The results has been evaluated by matlab "Classify" command.

import numpy
import numpy.linalg

Training = numpy.array ([
[	3.083000541	,	3.884595151	,	-0.188636122	,	0.195414241	,	1	]	,
[	2.801483487	,	6.866530374	,	-3.449344217	,	-1.632163434	,	1	]	,
[	1.871983018	,	9.500395632	,	-2.585595181	,	3.431353241	,	1	]	,
[	0.851945559	,	4.405563363	,	3.648770132	,	-1.128266174	,	1	]	,
[	2.779063584	,	2.190353727	,	3.22874661	,	-0.490358944	,	1	]	,
[	1.235740408	,	0.989200988	,	2.712604872	,	-1.769091097	,	1	]	,
[	3.380851707	,	5.692483183	,	3.228036329	,	-1.078698721	,	1	]	,
[	2.848035249	,	1.765150185	,	1.656737829	,	2.719613762	,	1	]	,
[	0.244434005	,	1.861363417	,	-4.388165464	,	-0.88299345	,	1	]	,
[	0.023841472	,	3.788272406	,	-2.329983786	,	1.883256161	,	1	]	,
[	5.682868207	,	2.196568184	,	0.034636604	,	3.590838754	,	1	]	,
[	1.663888002	,	0.671574691	,	3.328478797	,	1.441478338	,	1	]	,
[	2.385492064	,	4.767473093	,	4.85835909	,	-0.309088144	,	1	]	,
[	2.390723337	,	-0.078558706	,	-0.615786487	,	0.139780536	,	1	]	,
[	1.47196177	,	3.575403276	,	1.449036133	,	-1.147158236	,	1	]	,
[	1.825861619	,	3.346577593	,	-0.332543808	,	4.300496521	,	1	]	,
[	3.574854475	,	4.986296279	,	1.726504207	,	-0.186930843	,	1	]	,
[	2.621748838	,	1.802048901	,	0.747056255	,	1.020777394	,	1	]	,
[	2.699501388	,	2.860776766	,	-6.644945686	,	-3.769322824	,	1	]	,
[	2.927819388	,	3.716992215	,	-0.320506103	,	0.95323571	,	1	]	,
[	3.209106315	,	7.823241257	,	4.230215258	,	0.80017884	,	1	]	,
[	1.596825755	,	3.295022286	,	1.343781754	,	-0.034999749	,	1	]	,
[	1.330113144	,	3.914101506	,	3.593881412	,	1.149529898	,	1	]	,
[	1.674346075	,	2.704444319	,	0.843127208	,	0.793817872	,	1	]	,
[	1.526135707	,	5.160211387	,	5.545817511	,	-0.62150836	,	1	]	,
[	1.767939598	,	3.18832061	,	1.662257916	,	-0.729544136	,	1	]	,
[	2.673921962	,	1.51591124	,	-2.13191652	,	0.402953372	,	1	]	,
[	1.3778922	,	2.071327267	,	-1.802766304	,	-0.881072565	,	1	]	,
[	0.872688436	,	2.961828171	,	3.997987992	,	-0.271654801	,	1	]	,
[	2.293698086	,	2.820201188	,	-0.226840828	,	-0.383146524	,	1	]	,
[	2.617092152	,	4.309824729	,	1.477218229	,	-0.404863713	,	1	]	,
[	3.71390241	,	4.190385439	,	3.135059223	,	-2.464307947	,	1	]	,
[	4.778597521	,	5.758854198	,	-0.254045454	,	-1.712708807	,	1	]	,
[	2.630803588	,	2.874312028	,	5.863469932	,	-0.504159512	,	1	]	,
[	1.302782441	,	3.429065942	,	0.249766495	,	2.810526631	,	1	]	,
[	1.623479194	,	4.688163108	,	1.933316778	,	1.151731214	,	1	]	,
[	3.909179786	,	4.493335474	,	3.303765198	,	0.720255392	,	1	]	,
[	2.747059691	,	0.711266334	,	1.312827811	,	2.974932933	,	1	]	,
[	1.55491707	,	2.608555565	,	2.398119225	,	1.080993407	,	1	]	,
[	2.987897862	,	3.768476489	,	1.498804392	,	1.497272517	,	1	]	,
[	3.229254454	,	3.812494009	,	4.389282115	,	-0.376991658	,	1	]	,
[	3.156857348	,	5.113254404	,	3.095932413	,	1.763736656	,	1	]	,
[	1.781099032	,	1.214323495	,	-1.617395178	,	-1.343602149	,	1	]	,
[	1.420913063	,	3.815172513	,	4.704251839	,	1.552039857	,	1	]	,
[	1.471116912	,	1.715251395	,	1.278760771	,	-1.517057151	,	1	]	,
[	2.681591015	,	2.653980005	,	-1.558473978	,	2.233557994	,	1	]	,
[	1.950266444	,	4.248932544	,	1.962281065	,	-1.457680677	,	1	]	,
[	1.322164696	,	1.337547405	,	1.915841323	,	-1.489330278	,	1	]	,
[	4.253316822	,	2.609512102	,	-0.512086269	,	-0.313654754	,	1	]	,
[	2.190311049	,	4.053435306	,	-2.172150199	,	1.037235769	,	1	]	,
[	-1.489366462	,	-3.062822572	,	0.642020898	,	-2.766098593	,	2	]	,
[	-2.847294754	,	-4.591535548	,	-2.144022334	,	-2.98457208	,	2	]	,
[	-1.127082313	,	-1.239069148	,	0.202408984	,	1.076443839	,	2	]	,
[	-1.789513082	,	-1.770953918	,	3.72358423	,	-1.296180644	,	2	]	,
[	-0.109982281	,	1.161647191	,	1.227961168	,	0.591616078	,	2	]	,
[	-3.314386368	,	-4.180733419	,	-2.313722995	,	-1.639924832	,	2	]	,
[	-2.963575089	,	-3.5849489	,	1.343589156	,	-1.700469001	,	2	]	,
[	-3.068985344	,	-4.567156122	,	-0.740677223	,	-2.065713956	,	2	]	,
[	-1.940310072	,	-6.665229647	,	1.483554953	,	-2.577879076	,	2	]	,
[	-1.013429976	,	-0.305002986	,	-2.802948477	,	0.943200663	,	2	]	,
[	0.397687543	,	1.58121359	,	-4.639760256	,	-0.819527455	,	2	]	,
[	-1.760531571	,	-1.644631625	,	-2.223795304	,	1.259782365	,	2	]	,
[	-1.923263646	,	-2.990854889	,	-3.734315031	,	-1.63177478	,	2	]	,
[	-3.022698708	,	-5.401135955	,	-2.147728873	,	-0.491635676	,	2	]	,
[	-1.780042167	,	-4.019745986	,	-1.127005986	,	-0.682720633	,	2	]	,
[	-2.394141477	,	-2.811010872	,	5.113902561	,	-2.671036131	,	2	]	,
[	-1.690473828	,	-3.619459226	,	-0.5018085	,	-1.164189008	,	2	]	,
[	-1.59492647	,	-3.927859041	,	-2.583774444	,	-2.018480601	,	2	]	,
[	-0.542654058	,	-2.328936232	,	0.048897588	,	0.892704532	,	2	]	,
[	-2.227991199	,	0.12755591	,	-1.477596703	,	0.234957053	,	2	]	,
[	-2.239643254	,	-0.962025706	,	1.067240665	,	-1.868303695	,	2	]	,
[	-3.092580111	,	-0.193738769	,	2.73038511	,	-0.374074632	,	2	]	,
[	-2.671837477	,	-3.165922588	,	3.310045719	,	0.294109775	,	2	]	,
[	-2.109000103	,	-3.164050277	,	-2.226231905	,	-2.302728391	,	2	]	,
[	-0.947787201	,	0.811580173	,	1.375135167	,	0.147553788	,	2	]	,
[	-1.528034295	,	-1.190125219	,	1.16113935	,	-0.585101447	,	2	]	,
[	0.028934923	,	-3.975041671	,	0.44062582	,	-0.476990912	,	2	]	,
[	-0.997342506	,	0.439910784	,	0.443256819	,	-0.885964909	,	2	]	,
[	-2.552314172	,	-3.350852986	,	-5.337529691	,	-1.254014348	,	2	]	,
[	-1.197362867	,	-2.066065373	,	-3.597457252	,	-3.225465827	,	2	]	,
[	-1.184269507	,	-0.358881254	,	-2.129937538	,	1.559364095	,	2	]	,
[	-2.531162025	,	-8.163517352	,	-5.570907786	,	-2.679112284	,	2	]	,
[	-2.088792069	,	-4.172088191	,	-0.896677755	,	0.668074491	,	2	]	,
[	-2.332079491	,	-6.872503	,	-2.427326053	,	-4.392982035	,	2	]	,
[	-2.343019216	,	-2.595243108	,	-3.964320121	,	-2.01197241	,	2	]	,
[	-3.758598958	,	-5.138851451	,	-2.757523367	,	-4.149941287	,	2	]	,
[	-3.346298244	,	-5.389884711	,	-4.555219263	,	2.225792543	,	2	]	,
[	-3.217768088	,	-4.887675704	,	-2.593491879	,	0.608209064	,	2	]	,
[	-2.989202713	,	-4.954185659	,	-1.31913369	,	-3.335978808	,	2	]	,
[	-1.559661584	,	-4.571828996	,	0.530803341	,	-2.395722213	,	2	]	,
[	-0.954438666	,	0.1875986	,	1.841611136	,	-1.508093046	,	2	]	,
[	-3.174298083	,	0.595751192	,	0.021597664	,	1.388772992	,	2	]	,
[	-3.122558804	,	-3.604006416	,	-1.529255078	,	-0.715502024	,	2	]	,
[	-3.294899451	,	-2.233716705	,	0.264811009	,	0.841933209	,	2	]	,
[	-3.692660513	,	-4.13930892	,	0.0133535	,	0.155024654	,	2	]	,
[	-2.70151979	,	-0.240908919	,	0.931677137	,	0.158365769	,	2	]	,
[	-1.613540328	,	0.138213729	,	-0.443671455	,	-0.087958659	,	2	]	,
[	-1.721267688	,	-4.774979475	,	-2.872421336	,	-0.211940728	,	2	]	,
[	-1.38156233	,	0.113915232	,	-0.868188567	,	-0.355351539	,	2	]	,
[	-2.827138642	,	-2.60350022	,	-0.94973729	,	-0.301099441	,	2	]	,
[	-3.520206389	,	-1.811868673	,	-4.935306941	,	0.929122809	,	2	]	,
[	-1.645040826	,	-0.595359879	,	-0.279141023	,	2.123899649	,	2	]	,
[	-1.751667127	,	-2.290737498	,	0.24835327	,	0.330828392	,	2	]	,
[	-1.873834308	,	-2.007079931	,	-0.320162011	,	-2.236195241	,	2	]	,
[	-3.066619448	,	-3.672563131	,	-3.243105926	,	-1.367279986	,	2	]	,
[	-3.684245505	,	-2.8554208	,	4.645519446	,	0.434300906	,	2	]	,
[	-0.715490127	,	-3.881834591	,	-4.528698382	,	0.130407469	,	2	]	,
[	-2.762320452	,	-5.566162213	,	-0.496654226	,	1.022328544	,	2	]	,
[	-3.174843982	,	-3.755624415	,	-2.748148736	,	-0.753203489	,	2	]	,
[	-1.633686765	,	-3.9214964	,	-0.989562736	,	-0.655430508	,	2	]	,
[	-1.610999249	,	-2.884258881	,	-6.215272135	,	-0.20058758	,	2	]	,
[	-2.296004237	,	-2.425708606	,	1.860235986	,	1.725194243	,	2	]	,
[	-1.999381248	,	-1.801175581	,	3.291505169	,	1.322874429	,	2	]	,
[	-2.649922239	,	-5.731253334	,	-1.16257594	,	0.610803267	,	2	]	,
[	-3.773880151	,	-3.651965711	,	0.480146337	,	-1.598049924	,	2	]	,
[	-2.285529642	,	-3.56211403	,	-1.508276453	,	-2.739898321	,	2	]	,
[	-1.139138349	,	-4.681627453	,	1.756855118	,	-2.006697769	,	2	]	,
[	-2.549380852	,	-2.795933032	,	0.866186741	,	-1.046198366	,	2	]	,
[	-2.80863982	,	-1.875438781	,	-2.818119444	,	0.016636722	,	2	]	,
[	-1.096885868	,	-0.111376434	,	-2.115713578	,	0.069704783	,	2	]	,
[	-2.888854834	,	0.161276654	,	3.697308401	,	-0.521937695	,	2	]	,
[	-2.95892858	,	-3.733388528	,	1.013733068	,	0.655552108	,	2	]	,
[	-2.711389227	,	-1.911206936	,	1.009883729	,	-1.086248418	,	2	]	,
[	-3.751180339	,	-3.166307515	,	-1.438038899	,	-2.368010946	,	2	]	,
[	-2.323213756	,	-1.426195266	,	2.433886488	,	2.67686823	,	2	]	,
[	0.275748395	,	-1.23861233	,	4.835349208	,	-2.521068721	,	2	]	,
[	-2.007546717	,	-1.551892453	,	-7.244924187	,	2.980314335	,	2	]	,
[	-1.354676019	,	-0.993470354	,	1.134054673	,	-0.934730345	,	2	]	,
[	-1.786620458	,	-1.329388672	,	-1.2838139	,	0.499299864	,	2	]	,
[	-0.049464178	,	0.017283909	,	-0.128290854	,	-1.226486337	,	2	]	,
[	-0.636706462	,	-1.2806088	,	0.680229777	,	-2.733965265	,	2	]	,
[	-2.27524992	,	-2.230654186	,	-0.875457279	,	-0.234115981	,	2	]	,
[	-2.336884427	,	-1.958708297	,	2.319757943	,	-0.086449487	,	2	]	,
[	-1.519686329	,	-0.806705582	,	-2.212282401	,	-0.789562007	,	2	]	,
[	-2.453512511	,	-3.076327017	,	-4.289069573	,	0.568710476	,	2	]	,
[	-2.455482632	,	-3.971725977	,	-0.632536534	,	-0.322709233	,	2	]	,
[	-1.157265578	,	-5.458650087	,	-5.889911379	,	-2.575563791	,	2	]	,
[	-3.19378221	,	-5.632145918	,	-5.023512687	,	-0.131908002	,	2	]	,
[	-1.070038076	,	-2.107490371	,	-4.309187256	,	-0.751487375	,	2	]	,
[	-2.735538006	,	-0.361565165	,	-2.668380343	,	0.399393911	,	2	]	,
[	-2.966722112	,	-0.994536108	,	1.096444098	,	-0.842774505	,	2	]	,
[	-3.079509878	,	-2.387919056	,	-3.771091299	,	0.107519459	,	2	]	,
[	-3.216080052	,	-4.673097139	,	-3.387463969	,	-1.400803435	,	2	]	,
[	-1.507059874	,	-0.068648191	,	1.269400549	,	-0.509858567	,	2	]	,
[	-2.197233186	,	-7.769045545	,	1.453033098	,	-2.848407589	,	2	]	,
[	-1.14732975	,	-1.951401819	,	-3.412785911	,	0.567597129	,	2	]	,
[	-2.016499453	,	-2.061741005	,	1.523814895	,	1.898089197	,	2	]	,
[	-3.22760695	,	-3.547041422	,	0.481089104	,	-1.073148069	,	2	]	,
[	-2.301169232	,	-2.942024659	,	-0.858278521	,	-1.538583335	,	2	]	,
[	-0.624118466	,	-1.543897926	,	-4.493850129	,	-2.208191111	,	2	]	,
[	19.23558964	,	0.049412466	,	12.97419658	,	2.010928138	,	3	]	,
[	18.27803998	,	-0.72406439	,	8.073907513	,	3.974539223	,	3	]	,
[	19.90359912	,	-1.374538449	,	5.980416661	,	-0.892813524	,	3	]	,
[	18.2827387	,	-1.352927767	,	7.133241897	,	-0.011459331	,	3	]	,
[	21.33109043	,	1.183796627	,	12.47220162	,	2.352110241	,	3	]	,
[	20.79134547	,	0.478648968	,	9.688134167	,	-0.641490442	,	3	]	,
[	18.96819047	,	1.541246954	,	12.13954344	,	3.013496777	,	3	]	,
[	21.59656092	,	-0.785778198	,	8.026476385	,	-0.31692937	,	3	]	,
[	19.12803493	,	1.866121823	,	8.82046267	,	-1.817228628	,	3	]	,
[	19.48016939	,	1.733752385	,	10.58051629	,	3.452584414	,	3	]	
])


def Classifier(X, Training, Priors = True):
	'''Clasifies the input X into one of the groups in the training set.
	
    Keyword arguments:
    X -- the input value or vectore to be classified
	Training -- the training set for the clasifier, each row is a observation and the last element of each 
	    row is the group that the observation is belong to.
	Priors -- the piror probability of each class which can be given or can be obtained from the training set,
		Defualt is true, means it needs to be computed from training set
		False, means it will be given manually
	Returns: int
		An integer number give the group number that the classifier has been classified the input 
	'''
	    
	'''Obtain number of training elements and classes from training set
	'''
	[NumberOfObzervation, NumberOfFeature] = Training.shape
	NumberOfFeature = NumberOfFeature - 1
	NumberOfClass = int(max(Training[:, NumberOfFeature]))
	print ("Number of Class = %d" %(NumberOfClass))
	
	'''define and initialize prior probability, mean, Covariance, and discrimination function
	'''
	PriorProbability = numpy.zeros ((NumberOfClass+1, 1))
	DiscriminantFunction = numpy.ones ((NumberOfClass+1, 1)) * -numpy.inf

	'''Seperate each group in the training set according to their Group number
	'''
	for c in range (1,NumberOfClass+1):
		GroupCount = 0.0
		GroupMembers = numpy.zeros((1, NumberOfFeature))
		
		for i in range(NumberOfObzervation):
			if Training[i, NumberOfFeature] == c:
				GroupMembers = numpy.vstack((GroupMembers, Training[i, 0:NumberOfFeature])) 
				GroupCount = GroupCount + 1.0
				
		'''Removing zero row from the begining of the array
		'''
		GroupMember = GroupMembers[ 1:GroupCount+1, :]
		#print (GroupMember)
		
		'''Compute the prior probability of each class from training set if it is set to do so
		'''
		if Priors:
			PriorProbability[c] = ([GroupCount / NumberOfObzervation])
			#print(PriorProbability) 		
			
		'''Compute the mean vectors for each class
		'''
		Mean = numpy.mean(GroupMember, axis = 0)
		#print (Mean)
		'''Compute the Coveriance matrix for each class
		'''
		Cove = numpy.cov(GroupMember, rowvar = 0)
		#print (Cove)
		'''Compute the discriminant function of each class for a given vector X
		'''
		if numpy.linalg.det(Cove):
			DiscriminantFunction[c] = -.5 * (numpy.dot(numpy.dot(numpy.subtract(X, Mean), numpy.linalg.inv(Cove)), numpy.transpose(numpy.subtract(X, Mean)))) - .5 * numpy.log(numpy.linalg.det(Cove)) + numpy.log(PriorProbability[c]) 
	
	'''print the discriminant function value for the reference
	'''
	# print(DiscriminantFunction)
	return (DiscriminantFunction == numpy.max(DiscriminantFunction)).nonzero()[0]
	
		

X = [20.79134547	,	0.478648968	,	9.688134167	,	-0.641490442]

G = Classifier(X, Training)

print("This sample belongs to Class %d" %G)


